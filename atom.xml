<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HLY-blog</title>
  
  
  <link href="https://cddorz.github.io/atom.xml" rel="self"/>
  
  <link href="https://cddorz.github.io/"/>
  <updated>2020-11-06T10:08:49.890Z</updated>
  <id>https://cddorz.github.io/</id>
  
  <author>
    <name>HLY</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java集合框架</title>
    <link href="https://cddorz.github.io/2020/11/06/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
    <id>https://cddorz.github.io/2020/11/06/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/</id>
    <published>2020-11-06T07:33:44.000Z</published>
    <updated>2020-11-06T10:08:49.890Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-集合框架"><a href="#Java-集合框架" class="headerlink" title="Java 集合框架"></a>Java 集合框架</h1><p><img src= "/img/loading.gif" data-lazy-src="https://www.runoob.com/wp-content/uploads/2014/01/2243690-9cd9c896e0d512ed.gif" alt="img"></p><ul><li><strong>接口：</strong>是代表集合的抽象数据类型。例如 Collection、List、Set、Map 等。之所以定义多个接口，是为了以不同的方式操作集合对象</li><li><strong>实现（类）：</strong>是集合接口的具体实现。从本质上讲，它们是可重复使用的数据结构，例如：ArrayList、LinkedList、HashSet、HashMap。</li><li><strong>算法：</strong>是实现集合接口的对象里的方法执行的一些有用的计算，例如：搜索和排序。这些算法被称为多态，那是因为相同的方法可以在相似的接口上有着不同的实现。</li></ul><h4 id="一、Set和List的区别："><a href="#一、Set和List的区别：" class="headerlink" title="一、Set和List的区别："></a>一、Set和List的区别：</h4><ul><li>Set 接口实例存储的是无序的，不重复的数据。List 接口实例存储的是有序的，可以重复的元素</li><li> Set检索效率低下，删除和插入效率高，插入和删除不会引起元素位置改变 <strong>&lt;实现类有HashSet,TreeSet&gt;</strong></li><li>List和数组类似，可以动态增长，根据实际存储的数据的长度自动增长List的长度。查找元素效率高，插入删除效率低，因为会引起其他元素位置改变 <strong>&lt;实现类有ArrayList,LinkedList,Vector&gt;</strong> </li></ul><h4 id="二、如何使用迭代器："><a href="#二、如何使用迭代器：" class="headerlink" title="二、如何使用迭代器："></a>二、如何使用迭代器：</h4><h5 id="遍历-ArrayList"><a href="#遍历-ArrayList" class="headerlink" title="遍历 ArrayList"></a>遍历 ArrayList</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     List&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">     list.add(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">     list.add(<span class="string">&quot;World&quot;</span>);</span><br><span class="line">     list.add(<span class="string">&quot;HAHAHAHA&quot;</span>);</span><br><span class="line">     <span class="comment">//第一种遍历方法使用 For-Each 遍历 List</span></span><br><span class="line">     <span class="keyword">for</span> (String str : list) &#123;            <span class="comment">//也可以改写 for(int i=0;i&lt;list.size();i++) 这种形式</span></span><br><span class="line">        System.out.println(str);</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="comment">//第二种遍历，把链表变为数组相关的内容进行遍历</span></span><br><span class="line">     String[] strArray=<span class="keyword">new</span> String[list.size()];</span><br><span class="line">     list.toArray(strArray);</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;strArray.length;i++) <span class="comment">//这里也可以改写为  for(String str:strArray) 这种形式</span></span><br><span class="line">     &#123;</span><br><span class="line">        System.out.println(strArray[i]);</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//第三种遍历 使用迭代器进行相关遍历,该方法可以不用担心在遍历的过程中会超出集合的长度。</span></span><br><span class="line">     </span><br><span class="line">     Iterator&lt;String&gt; ite=list.iterator();</span><br><span class="line">     <span class="keyword">while</span>(ite.hasNext())<span class="comment">//判断下一个元素之后有值</span></span><br><span class="line">     &#123;</span><br><span class="line">         System.out.println(ite.next());</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="遍历-Map"><a href="#遍历-Map" class="headerlink" title="遍历 Map"></a>遍历 Map</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">      map.put(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;value1&quot;</span>);</span><br><span class="line">      map.put(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;value2&quot;</span>);</span><br><span class="line">      map.put(<span class="string">&quot;3&quot;</span>, <span class="string">&quot;value3&quot;</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//第一种：普遍使用，二次取值</span></span><br><span class="line">      System.out.println(<span class="string">&quot;通过Map.keySet遍历key和value：&quot;</span>);</span><br><span class="line">      <span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;key= &quot;</span>+ key + <span class="string">&quot; and value= &quot;</span> + map.get(key));</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//第二种</span></span><br><span class="line">      System.out.println(<span class="string">&quot;通过Map.entrySet使用iterator遍历key和value：&quot;</span>);</span><br><span class="line">      Iterator&lt;Map.Entry&lt;String, String&gt;&gt; it = map.entrySet().iterator();</span><br><span class="line">      <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">       Map.Entry&lt;String, String&gt; entry = it.next();</span><br><span class="line">       System.out.println(<span class="string">&quot;key= &quot;</span> + entry.getKey() + <span class="string">&quot; and value= &quot;</span> + entry.getValue());</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//第三种：推荐，尤其是容量大时</span></span><br><span class="line">      System.out.println(<span class="string">&quot;通过Map.entrySet遍历key和value&quot;</span>);</span><br><span class="line">      <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : map.entrySet()) &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;key= &quot;</span> + entry.getKey() + <span class="string">&quot; and value= &quot;</span> + entry.getValue());</span><br><span class="line">      &#125;</span><br><span class="line">    </span><br><span class="line">      <span class="comment">//第四种</span></span><br><span class="line">      System.out.println(<span class="string">&quot;通过Map.values()遍历所有的value，但不能遍历key&quot;</span>);</span><br><span class="line">      <span class="keyword">for</span> (String v : map.values()) &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;value= &quot;</span> + v);</span><br><span class="line">      &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三、LinkedList"><a href="#三、LinkedList" class="headerlink" title="三、LinkedList"></a>三、LinkedList</h4><h6 id="1、创建一个简单的链表实例"><a href="#1、创建一个简单的链表实例" class="headerlink" title="1、创建一个简单的链表实例"></a>1、创建一个简单的链表实例</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunoobTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LinkedList&lt;String&gt; sites = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">        sites.add(<span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Weibo&quot;</span>);</span><br><span class="line">        System.out.println(sites);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2、常用方法"><a href="#2、常用方法" class="headerlink" title="2、常用方法"></a>2、常用方法</h6><table><thead><tr><th align="left">方法</th><th>描述</th></tr></thead><tbody><tr><td align="left">public int size()</td><td>返回链表元素个数。</td></tr><tr><td align="left">public E set(int index, E element)</td><td>设置指定位置的元素。</td></tr><tr><td align="left">public Object clone()</td><td>克隆该列表。</td></tr><tr><td align="left">public boolean add(E e)</td><td>链表末尾添加元素，返回是否成功，成功为 true，失败为 false。</td></tr><tr><td align="left">public void add(int index, E element)</td><td>向指定位置插入元素。</td></tr><tr><td align="left">public void addFirst(E e)</td><td>元素添加到头部</td></tr><tr><td align="left">public boolean offer(E e)</td><td>向链表末尾添加元素，返回是否成功，成功为 true，失败为 false。</td></tr><tr><td align="left">public void clear()</td><td>清空链表。</td></tr><tr><td align="left">public boolean remove(Object o)</td><td>删除某一元素，返回是否成功，成功为 true，失败为 false。</td></tr><tr><td align="left">public E remove(int index)</td><td>删除指定位置的元素。</td></tr><tr><td align="left">public E remove()</td><td>删除并返回第一个元素。</td></tr><tr><td align="left">public E get(int index)</td><td>返回指定位置的元素。</td></tr></tbody></table><h4 id="四、HashMap"><a href="#四、HashMap" class="headerlink" title="四、HashMap"></a>四、HashMap</h4><h6 id="1、基本内容："><a href="#1、基本内容：" class="headerlink" title="1、基本内容："></a>1、基本内容：</h6><p>HashMap 是一个散列表，它存储的内容是键值对(key-value)映射。</p><p>HashMap 实现了 Map 接口，根据键的 HashCode 值存储数据，具有很快的访问速度，最多允许一条记录的键为 null，不支持线程同步。</p><p>HashMap 是无序的，即不会记录插入的顺序。</p><p>HashMap 继承于AbstractMap，实现了 Map、Cloneable、java.io.Serializable 接口。</p><h6 id="2、HashMap-的-key-与-value-类型可以相同也可以不同，可以是字符串（String）类型的-key-和-value，也可以是整型（Integer）的-key-和字符串（String）类型的-value。"><a href="#2、HashMap-的-key-与-value-类型可以相同也可以不同，可以是字符串（String）类型的-key-和-value，也可以是整型（Integer）的-key-和字符串（String）类型的-value。" class="headerlink" title="2、HashMap 的 key 与 value 类型可以相同也可以不同，可以是字符串（String）类型的 key 和 value，也可以是整型（Integer）的 key 和字符串（String）类型的 value。"></a>2、HashMap 的 key 与 value 类型可以相同也可以不同，可以是字符串（String）类型的 key 和 value，也可以是整型（Integer）的 key 和字符串（String）类型的 value。</h6><h6 id="3、HashMap-中的元素实际上是对象，一些常见的基本类型可以使用它的包装类。"><a href="#3、HashMap-中的元素实际上是对象，一些常见的基本类型可以使用它的包装类。" class="headerlink" title="3、HashMap 中的元素实际上是对象，一些常见的基本类型可以使用它的包装类。"></a>3、HashMap 中的元素实际上是对象，一些常见的基本类型可以使用它的包装类。</h6><table><thead><tr><th>基本类型</th><th>引用类型</th></tr></thead><tbody><tr><td>boolean</td><td>Boolean</td></tr><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>char</td><td>Character</td></tr></tbody></table><h6 id="4、例："><a href="#4、例：" class="headerlink" title="4、例："></a>4、例：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 HashMap 类      </span></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunoobTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建 HashMap 对象 Sites</span></span><br><span class="line">        HashMap&lt;Integer, String&gt; Sites = <span class="keyword">new</span> HashMap&lt;Integer, String&gt;();</span><br><span class="line">        <span class="comment">// 添加键值对</span></span><br><span class="line">        Sites.put(<span class="number">1</span>, <span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        Sites.put(<span class="number">2</span>, <span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        Sites.put(<span class="number">3</span>, <span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        Sites.put(<span class="number">4</span>, <span class="string">&quot;Zhihu&quot;</span>);</span><br><span class="line">        System.out.println(Sites);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：&#123;1=Google, 2=Runoob, 3=Taobao, 4=Zhihu&#125;</span></span><br></pre></td></tr></table></figure><h6 id="5、常用方法："><a href="#5、常用方法：" class="headerlink" title="5、常用方法："></a>5、常用方法：</h6><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/java/java-hashmap-clear.html">clear()</a></td><td>删除 hashMap 中的所有键/值对</td></tr><tr><td><a href="https://www.runoob.com/java/java-hashmap-clone.html">clone()</a></td><td>复制一份 hashMap</td></tr><tr><td><a href="https://www.runoob.com/java/java-hashmap-isempty.html">isEmpty()</a></td><td>判断 hashMap 是否为空</td></tr><tr><td><a href="https://www.runoob.com/java/java-hashmap-size.html">size()</a></td><td>计算 hashMap 中键/值对的数量</td></tr><tr><td><a href="https://www.runoob.com/java/java-hashmap-put.html">put()</a></td><td>将键/值对添加到 hashMap 中</td></tr><tr><td><a href="https://www.runoob.com/java/java-hashmap-remove.html">remove()</a></td><td>删除 hashMap 中指定键 key 的映射关系</td></tr><tr><td><a href="https://www.runoob.com/java/java-hashmap-replace.html">replace()</a></td><td>替换 hashMap 中是指定的 key 对应的 value。</td></tr><tr><td><a href="https://www.runoob.com/java/java-hashmap-get.html">get()</a></td><td>获取指定 key 对应对 value</td></tr><tr><td><a href="https://www.runoob.com/java/java-hashmap-entryset.html">entrySet()</a></td><td>返回 hashMap 中所有映射项的集合集合视图。</td></tr><tr><td><a href="https://www.runoob.com/java/java-hashmap-keyset.html">keySet</a>()</td><td>返回 hashMap 中所有 key 组成的集合视图。</td></tr><tr><td><a href="https://www.runoob.com/java/java-hashmap-values.html">values()</a></td><td>返回 hashMap 中存在的所有 value 值。</td></tr></tbody></table><p><a href="https://www.runoob.com/java/java-hashmap.html">参考文章</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java-集合框架&quot;&gt;&lt;a href=&quot;#Java-集合框架&quot; class=&quot;headerlink&quot; title=&quot;Java 集合框架&quot;&gt;&lt;/a&gt;Java 集合框架&lt;/h1&gt;&lt;p&gt;&lt;img src= &quot;/img/loading.gif&quot; data-lazy-src</summary>
      
    
    
    
    <category term="Java" scheme="https://cddorz.github.io/categories/Java/"/>
    
    
    <category term="总结" scheme="https://cddorz.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>青鸢面基大会</title>
    <link href="https://cddorz.github.io/2020/10/31/%E9%9D%92%E9%B8%A2%E9%9D%A2%E5%9F%BA%E5%A4%A7%E4%BC%9A/"/>
    <id>https://cddorz.github.io/2020/10/31/%E9%9D%92%E9%B8%A2%E9%9D%A2%E5%9F%BA%E5%A4%A7%E4%BC%9A/</id>
    <published>2020-10-31T13:32:30.000Z</published>
    <updated>2020-11-02T10:04:28.245Z</updated>
    
    <content type="html"><![CDATA[<h2 id="青鸢面基大会"><a href="#青鸢面基大会" class="headerlink" title="青鸢面基大会"></a>青鸢面基大会</h2><h4 id="10-30青鸢工作室面基大会。西安电子科技大学青鸢工作室nb！"><a href="#10-30青鸢工作室面基大会。西安电子科技大学青鸢工作室nb！" class="headerlink" title="10.30青鸢工作室面基大会。西安电子科技大学青鸢工作室nb！"></a>10.30青鸢工作室面基大会。西安电子科技大学青鸢工作室nb！</h4><p>18：30——19：00是学长树总给大家说一下工作室的代码规范。</p><p>​    之后的聚餐才是真正的重点！因为有美团大四工作学长和字节大三实习学长来和我们一起聊天。</p><p>虽然一开始大家都不是很熟悉的时候，没聊啥，但随着学长们分享去大场工作的经验，大家的兴趣也都提了起来，对大厂有抑制不住的幻想hhhhh，也了解到很多的神。</p><p>​    感觉这次聚餐之后，对字节有了更多的期望，一人一导师的制度真的感觉很好，然后在知乎上看到在字节成长度会真的很高，所有现阶段目标就是为了字节而努力，那个大三学长也是十月份才开始觉醒。</p><p>​    就感觉对未来充满了希望和有了目标吧。qwq。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;青鸢面基大会&quot;&gt;&lt;a href=&quot;#青鸢面基大会&quot; class=&quot;headerlink&quot; title=&quot;青鸢面基大会&quot;&gt;&lt;/a&gt;青鸢面基大会&lt;/h2&gt;&lt;h4 id=&quot;10-30青鸢工作室面基大会。西安电子科技大学青鸢工作室nb！&quot;&gt;&lt;a href=&quot;#10-30青</summary>
      
    
    
    
    <category term="随笔" scheme="https://cddorz.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="总结" scheme="https://cddorz.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>一天的心得</title>
    <link href="https://cddorz.github.io/2020/10/29/%E4%B8%80%E5%A4%A9%E7%9A%84%E5%BF%83%E5%BE%97/"/>
    <id>https://cddorz.github.io/2020/10/29/%E4%B8%80%E5%A4%A9%E7%9A%84%E5%BF%83%E5%BE%97/</id>
    <published>2020-10-29T08:57:59.000Z</published>
    <updated>2020-11-02T10:07:22.687Z</updated>
    
    <content type="html"><![CDATA[<h3 id="First-step"><a href="#First-step" class="headerlink" title="First step"></a>First step</h3><p>​    一个晚上和一个白天的成果，初步搭建好了自己的博客，虽然挺累的，也算是走出舒适圈的第一步了，也第一次体验到了找bug的痛苦！！！</p><p>​    总结一下今天遇到的问题，希望可以帮助到同样有这些问题的人：</p><h5 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h5><p>​        1)、如果遇到你改了某个地方之后，登录你部属的网站发现十个空网站，那么问题应该是你_config.yml文件某个部署错了，可以先本地运行一下然后看看报错（今天问的一个巨佬，orz）。</p><p>​        2)、部署新东西或之后：</p><p>​                    所在文件夹用git命令：hexo g   hexo d</p><p>​        3)、hexo clean万能的命令，有时候刷新不出来新内容可以等到或者hexo clean。可以先在本地看看效果，如果本地效果出来了，那么就只是时间问题啦。</p><p>呜呜呜，第一篇blog，markdown很多语法还不熟悉，所以就先这样吧，害，以后会变得更强的！</p><p><em>少年鲜衣怒马， 不负韶华！！！！</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;First-step&quot;&gt;&lt;a href=&quot;#First-step&quot; class=&quot;headerlink&quot; title=&quot;First step&quot;&gt;&lt;/a&gt;First step&lt;/h3&gt;&lt;p&gt;​    一个晚上和一个白天的成果，初步搭建好了自己的博客，虽然挺累的，也算</summary>
      
    
    
    
    <category term="随笔" scheme="https://cddorz.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="总结" scheme="https://cddorz.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>
